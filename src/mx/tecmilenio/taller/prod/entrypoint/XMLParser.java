/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.tecmilenio.taller.prod.entrypoint;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import mx.tecmilenio.taller.prod.bean.ElementDataBean;
import mx.tecmilenio.taller.prod.bean.TechnicalFeaturesBean;
import mx.tecmilenio.taller.prod.connector.Connector;
import mx.tecmilenio.taller.prod.dom.generator.XMLGen;
import mx.tecmilenio.taller.prod.dom.generator.impl.XMLGenImpl;
import mx.tecmilenio.taller.prod.service.XMLService;
import mx.tecmilenio.taller.prod.service.impl.XMLServiceImpl;
import mx.tecmilenio.taller.prod.variables.XMLVars;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

/**
 *
 * @author Osvaldo Ignacio Rios Zambrano
 */
public class XMLParser extends javax.swing.JFrame {
    
    
    /**
     * Creates new form XMLParser
     */
    public XMLParser() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XML Parser");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Datos de Conexi贸n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10))); // NOI18N

        jLabel2.setText("Servidor de Base de Datos(Direcci贸n IP o nombre)");

        jLabel3.setText("Login");

        jPasswordField1.setText("jPasswordField1");

        jLabel4.setText("Password");

        jButton1.setLabel("Conectar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Sin conexi贸n");

        jTextField5.setText("PLACMSSR");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre de la base de datos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jTextField5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Ubicaci贸n de los archivos XML generados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10))); // NOI18N

        jButton2.setText("Buscar carpeta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Generaci贸n de Archivos XML", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10))); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setLabel("Iniciar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser j= new JFileChooser();
        j.setSelectedFile(null);
        j.showOpenDialog(j);
        String path= j.getCurrentDirectory().getAbsolutePath();
        if(path != null && path.length() > 0){
            this.jTextField3.setText(path);
            this.jTextField3.setEditable(false);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Connector con = Connector.getInstance();
        XMLVars vars = XMLVars.getInstance();
        String pwd = new String(this.jPasswordField1.getPassword());
        
        
        if(this.jTextField1.getText()==null || this.jTextField1.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Escriba la direcci贸n IP o el nombre del servidor de BD",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(this.jTextField2.getText()==null || this.jTextField2.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Escriba el usuario de acceso a la BD",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(pwd.length() == 0){
            JOptionPane.showMessageDialog(null, "Escriba el password de la BD",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(this.jTextField5.getText()==null || this.jTextField5.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Escriba el nombre de la base de datos","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        vars.setNameDB(this.jTextField5.getText());
   
        boolean status = true; //con.stablishConnection(this.jTextField1.getText(), 
                //this.jTextField5.getText(), this.jTextField2.getText(), pwd);
        if(status){
            this.jLabel5.setText("Conectado");
        }else{
            this.jLabel5.setText("Sin conexi贸n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        
        if(this.jLabel5.getText().equals("Sin conexi贸n")){
            JOptionPane.showMessageDialog(null, "Establezca una conexi贸n a la BD",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(this.jTextField3.getText()==null || this.jTextField3.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Seleccione una ubicaci贸n para la creaci贸n del archivo XML",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            try{
                String path = this.jTextField3.getText();
                
                this.jButton3.setEnabled(false);
                createXML(path);        
                
            }catch(Exception err){
                System.err.println(err.getMessage());
            }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed
   
    private void createXML(final String path){
        
        final XMLGen g = new XMLGenImpl();
        final XMLService s = new XMLServiceImpl();
        final List<String> listMap = new ArrayList();
            
        final List<ElementDataBean> lst = s.getModels();
        
        Thread t = new Thread(){
            @Override
            public void run(){
                    
                int ff = 0;
                Element data = null;
                Iterator it = lst.iterator();
                String countryCode = "";
                String lang        = "";                
                while(it.hasNext()){
                    ElementDataBean edb = (ElementDataBean) it.next();
                    Element itemContents = new Element("ItemContents");
                    Document doc = new Document(itemContents);

                    if(edb.getLanguage().equals("en")){                        
                        countryCode = "us";
                    }else if(edb.getLanguage().equals("es")){                        
                        countryCode = "mx";
                    }else if(edb.getLanguage().equals("pt")){                        
                        countryCode = "br";
                    }
                    
                    HashMap<String,String> map = new HashMap();
                    map.put("nodeName", "ItemContent");
                    Element itemContent = g.addElement("ItemContent", map);
                    data = g.setElementData(edb.getShortModNum(),edb.getNameElementSMN(),edb.getListAttrSMN());
                    itemContent.addContent(data);
                    data = g.setElementData(edb.getUnifiedModNum(),edb.getNameElementUMN(),edb.getListAttrUMN());
                    itemContent.addContent(data);   
                    data = g.setElementData(edb.getCatalogName(),edb.getNameElementCN(),edb.getListAttrCN());
                    itemContent.addContent(data);  
                    List<String> listMap = new ArrayList();
                    listMap.add("Category");
                    listMap.add("Category");
                    listMap.add("Category");
                    listMap.add("string");
                    map = g.setMap(listMap);
                    Element dataGroup = g.addElement("dataGroup", map);
                    for(int x=1; x <= 5; x++){
                       data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"CategoryTree" + x,
                                                    "CategoryTree", "CategoryTree", "string"}));
                       dataGroup.addContent(data);
                    }
                    itemContent.addContent(dataGroup);
                    listMap = new ArrayList();
                    listMap.add("GeneralData");
                    listMap.add("GeneralData");
                    listMap.add("GeneralData");
                    listMap.add("string");
                    map = g.setMap(listMap);
                    dataGroup = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"BrandName",
                                                    "Brand Name", "Brand Name", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ProductType",
                                                    "Product Type", "Product Type", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"Tentative",
                                                    "Tentative", "Tentative", "flag"}));
                    dataGroup.addContent(data);
                    listMap = new ArrayList();
                    listMap.add("SalesRegion");
                    listMap.add("Sales Region");
                    listMap.add("Sales Region");
                    listMap.add("string");
                    map = g.setMap(listMap);           
                    Element dataGroup2 = g.addElement("dataGroup", map);
                    data = g.setElementData(countryCode + "_" + edb.getLanguage(),"data",(List<String>)Arrays.asList(new String[]{"locale",
                                                    "locale","locale", "string"}));         
                    dataGroup2.addContent(data);
                    dataGroup.addContent(dataGroup2);
                    listMap = new ArrayList();
                    listMap.add("Dates");
                    listMap.add("Dates");
                    listMap.add("Dates");
                    listMap.add("string");
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"WebPublishingDate",
                                                    "Web Publishing Date", "Web Publishing Date", "date"}));
                    dataGroup2.addContent(data);
                    dataGroup.addContent(dataGroup2);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"NumberofDaysNew",
                                                    "Number of Days New", "Number of Days New", "number"}));
                    dataGroup.addContent(data);
                    itemContent.addContent(dataGroup);
                    
                    /////
                    listMap = new ArrayList();
                    listMap.add("MarketingDescription");
                    listMap.add("MarketingDescription");
                    listMap.add("Marketing Description");
                    listMap.add("string");
                    map = g.setMap(listMap);
                    dataGroup = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ModelName",
                                                    "Model Name", "Model Name", "string"}));
                    dataGroup.addContent(data);
                    listMap = new ArrayList();
                    listMap.add("ShortDescriptions");
                    listMap.add("ShortDescriptions");
                    listMap.add("Short Descriptions");
                    listMap.add("string");
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ShortDescription",
                                                    "Short Description", "Short Description", "date"}));
                    dataGroup2.addContent(data);
                    dataGroup.addContent(dataGroup2);
                    listMap = new ArrayList();
                    listMap.add("SalesArguments");
                    listMap.add("SalesArguments");
                    listMap.add("Sales Arguments");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"SalesArgument",
                                                    "Sales Argument", "Sales Argument", "string"}));
                    dataGroup2.addContent(data);
                    for(int x=0; x < 5; x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"SalesArgument_" + x,
                                                    "Sales Argument", "Sales Argument", "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);                    
                    listMap = new ArrayList();
                    listMap.add("LongDescription");
                    listMap.add("LongDescription");
                    listMap.add("Long Description");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"Heading",
                                                    "Heading", "Heading", "string"}));
                    dataGroup2.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"Paragraph",
                                                    "Paragraph", "Paragraph", "string"}));
                    dataGroup2.addContent(data);
                    for(int x=0; x<4;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"Heading_"+x,
                                                    "Heading", "Heading", "string"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"Paragraph_"+x,
                                                    "Paragraph", "Paragraph", "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);    
                    itemContent.addContent(dataGroup);
                    listMap = new ArrayList();
                    listMap.add("DigitalAssets");
                    listMap.add("DigitalAssets");
                    listMap.add("DigitalAssets");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    listMap = new ArrayList();
                    listMap.add("Images");
                    listMap.add("Images");
                    listMap.add("Images");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    dataGroup.addContent(dataGroup2);
                    itemContent.addContent(dataGroup);
                    
                    listMap = new ArrayList();
                    listMap.add("Overview");
                    listMap.add("Overview");
                    listMap.add("Overview");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"OverviewTemplateSelector",
                                                    "Overview Template Selector", "Overview Template Selector", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"DisplayModelNumber",
                                                    "Display Model Number", "Display Model Number", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FullProductName",
                                                    "Full Product Name", "Full Product Name", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ModelNumber",
                                                    "Model Number", "Model Number", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"DescriptionForSeeAll",
                                                    "Description For See All", "Description For See All", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ProductMainPicture",
                                                    "Product Main Picture", "Product Main Picture", "file"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ProductLogoImage",
                                                    "Product Logo Image", "Product Logo Image", "file"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"PromotionLogoImage",
                                                    "Promotion Logo Image", "Promotion Logo Image", "file"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"SubBrandLogoImage",
                                                    "Sub Brand Logo Image", "Sub Brand Logo Image", "file"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"KeyCopy",
                                                    "Key Copy", "Key Copy", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"SubCopy",
                                                    "Sub Copy", "Sub Copy", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"SalesDateForTopPage",
                                                    "Sales Date For Top Page", "Sales Date For Top Page", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"Annotation",
                                                    "Annotation", "Annotation", "string"}));
                    dataGroup.addContent(data);        
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"MicrositeBannerImage",
                                                    "Microsite Banner Image", "Microsite Banner Image", "file"}));
                    dataGroup.addContent(data); 
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"MicrositeBannerImageURL",
                                                    "Microsite Banner Image URL", "Microsite Banner Image URL", "string"}));
                    dataGroup.addContent(data);
                    itemContent.addContent(dataGroup);
                    
                    listMap = new ArrayList();
                    listMap.add("Features");
                    listMap.add("Features");
                    listMap.add("Features");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"NumberOfFeatures",
                                                    "Number Of Features", "Number Of Features", "number"}));
                    dataGroup.addContent(data);
                    for(int x=1; x<=5;x++){
                        listMap = new ArrayList();
                        listMap.add("Feature"+x);
                        listMap.add("Feature"+x);
                        listMap.add("Feature"+x);
                        listMap.add("string"); 
                        map = g.setMap(listMap);    
                        dataGroup2 = g.addElement("dataGroup", map);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"SectorName"+x,
                                                        "Sector Name "+x, "Sector Name "+x, "string"}));
                        dataGroup2.addContent(data);
                        for(int y=1;y<=6;y++){
                            data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FactorName"+x+"-"+y,
                                                        "Factor Name "+x+"-"+y, "Factor Name "+x+"-"+y, "string"}));
                            dataGroup2.addContent(data);
                            data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FactorID"+x+"-"+y,
                                                        "Factor ID "+x+"-"+y, "Factor ID "+x+"-"+y, "string"}));
                            dataGroup2.addContent(data);
                        }
                        dataGroup.addContent(dataGroup2);
                    }
                    itemContent.addContent(dataGroup);
                    listMap = new ArrayList();
                    listMap.add("GetInspired");
                    listMap.add("GetInspired");
                    listMap.add("Get Inspired");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"GetInspiredTemplateSelector",
                                                    "Get Inspired Template Selector", "Get Inspired Template Selector", "string"}));
                    dataGroup.addContent(data);
                    for(int x=1;x<=5;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"GetInspiredTitle"+x,
                                                    "Get Inspired Title "+x, "Get Inspired Title "+x, "string"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"GetInspiredID"+x,
                                                    "Get Inspired ID "+x, "Get Inspired ID "+1, "string"}));
                        dataGroup.addContent(data);
                    }
                    itemContent.addContent(dataGroup);
                    
                    listMap = new ArrayList();
                    listMap.add("Accessory");
                    listMap.add("Accessory");
                    listMap.add("Accessory");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    listMap = new ArrayList();
                    listMap.add("AccessoryCategory");
                    listMap.add("AccessoryCategory");
                    listMap.add("Accessory Category");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);                    
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"AccessoryTemplateSelector",
                                                    "Accessory Template Selector", "Accessory Template Selector", "string"}));
                    dataGroup2.addContent(data);
                    for(int x=1;x<=7;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"AccessoryCategoryTitle"+x,
                                                    "Accessory Category Title "+x, "Accessory Category Title "+x, "string"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"AccessoryCategoryID"+x,
                                                    "Accessory Category ID "+x, "Accessory Category ID "+x, "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);
                    
                    listMap = new ArrayList();
                    listMap.add("AccessoryItems");
                    listMap.add("AccessoryItems");
                    listMap.add("Accessory Items");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);                    
                    for(int x=1;x<=16;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"AccessoryModelNumber"+x,
                                                    "Accessory Model Number "+x, "Accessory Model Number "+x, "string"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"AccessoryImage"+x,
                                                    "Accessory Image "+x, "Accessory Image "+x, "file"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"AccessoryText"+x,
                                                    "Accessory Text "+x, "Accessory Text "+x, "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);
                    itemContent.addContent(dataGroup);
                    ////
                    listMap = new ArrayList();
                    listMap.add("KeyTechnicalFeature");
                    listMap.add("KeyTechnicalFeature");
                    listMap.add("Key Technical Feature");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"TechnicalFeatureTemplateSelector",
                                                    "Technical Feature Template Selector", "Technical Feature Template Selector", "string"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ProductImage",
                                                    "Product Image", "Product Image", "file"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"ProductThumbnail",
                                                    "Product Thumbnail", "Product Thumbnail", "file"}));
                    dataGroup.addContent(data);
                    data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"CopyText",
                                                    "Copy Text", "Copy Text", "string"}));
                    dataGroup.addContent(data);
                    for(int x=1;x<=3;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"KeySpecs"+x,
                                                    "Key Specs "+x, "Key Specs "+x, "string"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"KeySpecsValue"+x,
                                                    "Key Specs Value "+x, "Key Specs Value "+x, "string"}));
                        dataGroup.addContent(data);
                    }
                    listMap = new ArrayList();
                    listMap.add("TechnicalIcons");
                    listMap.add("TechnicalIcons");
                    listMap.add("Technical Icons");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    for(int x=1;x<=10;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"TechnicalIcons"+x,
                                                    "Technical Icons "+x, "Technical Icons "+x, "file"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"TechnicalIconsText"+x,
                                                    "Technical Icons Text "+x, "Technical Icons Text "+x, "string"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"TechnicalIconsURL"+x,
                                                    "Technical Icons URL "+x, "Technical Icons URL "+x, "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);
                    itemContent.addContent(dataGroup);
        
                    listMap = new ArrayList();
                    listMap.add("Faceted");
                    listMap.add("Faceted");
                    listMap.add("Faceted");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    listMap = new ArrayList();
                    listMap.add("CompareFeature");
                    listMap.add("CompareFeature");
                    listMap.add("Compare Feature");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    for(int x=1;x<=20;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"CompareItem"+x,
                                                    "Compare Item "+x, "Compare Item "+x, "string"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"CompareValue"+x,
                                                    "Compare Value "+x, "Compare Value "+x, "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);                    

                    listMap = new ArrayList();
                    listMap.add("FacetedSlider");
                    listMap.add("FacetedSlider");
                    listMap.add("Faceted Slider");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    for(int x=1; x<=3; x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FacetedSliderItem"+x,
                                                    "Faceted Slider Item "+x, "Faceted Slider Item "+x, "string"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FacetedSliderMinValue"+x,
                                                    "Faceted Slider Min Value "+x, "Faceted Slider Min Value "+x, "number"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FacetedSliderMaxValue"+x,
                                                    "Faceted Slider Max Value "+x, "Faceted Slider Max Value "+x, "number"}));
                        dataGroup2.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FacetedSliderUnit"+x,
                                                    "Faceted Slider Unit "+x, "Faceted Slider Unit "+x, "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);      
                            
                    listMap = new ArrayList();
                    listMap.add("FacetedNavigation");
                    listMap.add("FacetedNavigation");
                    listMap.add("Faceted Navigation");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup2 = g.addElement("dataGroup", map);
                    for(int x=1;x<=9;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"FacetedItem"+x,
                                                    "Faceted Item "+x, "Faceted Item "+x, "string"}));
                        dataGroup2.addContent(data);
                    }
                    dataGroup.addContent(dataGroup2);
                    itemContent.addContent(dataGroup);
                    
                    listMap = new ArrayList();
                    listMap.add("Variation");
                    listMap.add("Variation");
                    listMap.add("Variation");
                    listMap.add("string"); 
                    map = g.setMap(listMap);    
                    dataGroup = g.addElement("dataGroup", map);
                    for(int x=1;x<=8;x++){
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationName"+x,
                                                    "Variation Name "+x, "Variation Name "+x, "string"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationImage"+x,
                                                    "Variation Image "+x, "Variation Image "+x, "file"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationImageforSeeAll"+x,
                                                    "Variation Image for See All "+x, "Variation Image for See All "+x, "file"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationIconImage"+x,
                                                    "Variation Icon Image "+x, "Variation Icon Image "+x, "file"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationText"+x,
                                                    "Variation Text "+x, "Variation Text "+x, "string"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationMeasurementName"+x,
                                                    "Variation Measurement Name "+x, "Variation Measurement Name "+x, "string"}));
                        dataGroup.addContent(data);
                        data = g.setElementData("","data",(List<String>)Arrays.asList(new String[]{"VariationUMN"+x,
                                                    "Variation UMN "+x, "Variation UMN "+x, "string"}));
                        dataGroup.addContent(data);
                    }
                    itemContent.addContent(dataGroup);
                    ////
                    listMap = new ArrayList();
                    listMap.add("TechnicalFeature");
                    listMap.add("TechnicalFeature");
                    listMap.add("TechnicalFeature");
                    listMap.add("string");
                    map = g.setMap(listMap);
                    dataGroup = g.addElement("dataGroup", map);
                    List<TechnicalFeaturesBean> listtfb = null;
                    List<String> grupos = s.getGroupsOfProduct(edb.getProductID());
                    if(grupos.size() > 0){
                        for(String grupo: grupos){
                            String nodeName = "";
                            if(grupo != null){
                                nodeName = s.contiene(grupo);
                            }else{
                                nodeName = grupo;
                            }
                            listMap = new ArrayList();
                            listMap.add(nodeName);
                            listMap.add(grupo);
                            listMap.add(grupo);
                            listMap.add("string");
                            map = g.setMap(listMap);
                            dataGroup2 = g.addElement("dataGroup", map);
                            listtfb = s.getTechnicalFeatures(edb.getProductID(), grupo);
                            for(TechnicalFeaturesBean tfb: listtfb){
                                nodeName = s.contiene(tfb.getName());
                                
                                data = g.setElementData(tfb.getValue(),"data",(List<String>)Arrays.asList(new String[]{nodeName,
                                                    tfb.getName(),tfb.getName(),"string"}));
                                dataGroup2.addContent(data);
                            }
                            dataGroup.addContent(dataGroup2);
                            
                        }
                    }else{
                        
                        /*listtfb = s.getTechnicalFeatures(edb.getProductID());
                        listMap = new ArrayList();
                        listMap.add("General");
                        listMap.add("General");
                        listMap.add("General");
                        listMap.add("string");
                        map = g.setMap(listMap);
                        dataGroup2 = g.addElement("dataGroup", map);
                        for(TechnicalFeaturesBean tfb: listtfb){
                            String nodeName = s.contiene(tfb.getName());
                            data = g.setElementData(tfb.getValue(),"data",(List<String>)Arrays.asList(new String[]{nodeName,
                                                  tfb.getName(),tfb.getName(),"string"}));
                            dataGroup2.addContent(data);
                        }
                        dataGroup.addContent(dataGroup2);*/
                    }
                    itemContent.addContent(dataGroup);
                    
                    
                    String namefile = s.createNameFile(edb.getShortModNum(),countryCode,edb.getLanguage());                    
                         
                    File file = new File(path + File.separator + namefile);
                    try{
                        doc.getRootElement().addContent(itemContent); 
                        XMLOutputter xmlOutput = new XMLOutputter();
                        xmlOutput.setFormat(Format.getPrettyFormat());
                        xmlOutput.output(doc, new FileWriter(file.getAbsolutePath()));
                        jTextArea1.setText(jTextArea1.getText() + "File " + namefile + " Created in " + path + "\n");
                        ff++;
                        
                    }catch(IOException err){
                        jTextArea1.setText(jTextArea1.getText() + err.getMessage());
                    }
                    
                    //if(ff == 100)break;
                }
                jTextArea1.setText(jTextArea1.getText() + "Processed files" + (ff));
                jButton3.setEnabled(true);
            }
        };
        t.start();     
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                System.err.println(info.getName());
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            
            //"javax.swing.plaf.metal.MetalLookAndFeel"
            //"com.sun.java.swing.plaf.motif.MotifLookAndFeel"
            //UIManager.getCrossPlatformLookAndFeelClassName()
            //UIManager.getSystemLookAndFeelClassName()
            javax.swing.UIManager.setLookAndFeel(
                  javax.swing.UIManager.getCrossPlatformLookAndFeelClassName()
            );
        
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XMLParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XMLParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XMLParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XMLParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
               
                new XMLParser().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
